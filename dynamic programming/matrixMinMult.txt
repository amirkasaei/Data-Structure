matrixMinMult(i, j): # without dynamic programming
    if i >= j:
        return 0

    minMult = +infinity

    for k in range(i+1, j):
        mult = matrixMinMult(i, k-1) + matrixMinMult(k, j) +  
                firstDimension(M(i))*firstDimension(M(k))*secondDimension(M(j))

        if minMult > mult:
            minMult = mult

    return minMult


print(matrixMult(1, n))





matrixMinMult(n): # with dynamic programming
    mult = [[[]*2]*(n+1)]*(n+1)
    
    fo len in range(1, n-1):
        for i in range(1, n-len):
            j = i + len
            minMult = +infinity
            for k in range(i+1, j):
                mult = mult[i][k-1][0] + mult[k][j][0] +  
                        firstDimension(M(i))*firstDimension(M(k))*secondDimension(M(j))

                if minMult > mult:
                    minMult = mult


            mult[i][j][0] = minMult

    return mult[1][n][0]

    O(n^3)





# with memoization
mult = [[]*(n+1)]*(n+1)
for in in range(n):
    for j in range(n):
        if i == j:
            mult[i][j] = 0
        else:
            mult[i][j] = +infinity


matrixMinMult(i, j): 
    if i >= j:
        return 0

    if mult[i][j] < +infinity:
        return mult[i][j]

    minMult = +infinity

    for k in range(i+1, j):
        mult = matrixMinMult(i, k-1) + matrixMinMult(k, j) +  
                firstDimension(M(i))*firstDimension(M(k))*secondDimension(M(j))

        if minMult > mult:
            minMult = mult

    mult[i][j] = minMult
    return minMult


print(matrixMult(1, n))

O(n^3)
